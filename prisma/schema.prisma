generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model categories {
  id               String            @id @db.Char(36)
  name             String            @db.VarChar(255)
  description      String?           @db.Text
  parent_id        String?           @db.Char(36)
  created_by       String?           @db.Char(36)
  status           categories_status @default(Active)
  created_at       DateTime?         @db.Timestamp(0)
  updated_at       DateTime?         @db.Timestamp(0)
  users            users?            @relation(fields: [created_by], references: [id], onUpdate: Restrict, map: "categories_created_by_foreign")
  categories       categories?       @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: Restrict, map: "categories_parent_id_foreign")
  other_categories categories[]      @relation("categoriesTocategories")
  courses          courses[]

  @@index([created_by], map: "categories_created_by_foreign")
  @@index([parent_id], map: "categories_parent_id_foreign")
}

model conversation_members {
  id              String                           @id @db.Char(36)
  conversation_id String                           @db.Char(36)
  user_id         String                           @db.Char(36)
  member_role     conversation_members_member_role @default(Member)
  status          conversation_members_status      @default(Active)
  created_at      DateTime?                        @db.Timestamp(0)
  updated_at      DateTime?                        @db.Timestamp(0)
  conversations   conversations                    @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversation_members_conversation_id_foreign")
  users           users                            @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "conversation_members_user_id_foreign")

  @@unique([conversation_id, user_id], map: "conversation_members_conversation_id_user_id_unique")
  @@index([user_id], map: "conversation_members_user_id_foreign")
}

model conversations {
  id                   String                 @id @db.Char(36)
  title                String?                @db.VarChar(255)
  course_id            String?                @db.Char(36)
  type                 conversations_type
  status               conversations_status   @default(Active)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  conversation_members conversation_members[]
  courses              courses?               @relation(fields: [course_id], references: [id], onUpdate: Restrict, map: "conversations_course_id_foreign")
  messages             messages[]

  @@index([course_id], map: "conversations_course_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model courses {
  id               String          @id @db.Char(36)
  title            String          @db.VarChar(255)
  description      String?         @db.Text
  category_id      String?         @db.Char(36)
  user_id          String          @db.Char(36)
  price            Decimal         @db.Decimal(10, 2)
  discount_price   Decimal?        @db.Decimal(10, 2)
  thumbnail_url    String?         @db.VarChar(255)
  duration         Int?
  level            courses_level?
  requirements     String?         @db.Text
  objectives       String?         @db.Text
  status           courses_status  @default(Draft)
  rating           Decimal         @default(0.00) @db.Decimal(3, 2)
  enrollment_count Int             @default(0)
  created_at       DateTime?       @db.Timestamp(0)
  updated_at       DateTime?       @db.Timestamp(0)
  conversations    conversations[]
  categories       categories?     @relation(fields: [category_id], references: [id], onUpdate: Restrict, map: "courses_category_id_foreign")
  users            users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "courses_user_id_foreign")
  enrollments      enrollments[]
  lessons          lessons[]

  @@index([category_id], map: "courses_category_id_foreign")
  @@index([user_id], map: "courses_user_id_foreign")
}

model enrollments {
  id              String                      @id @db.Char(36)
  user_id         String                      @db.Char(36)
  course_id       String                      @db.Char(36)
  expiry_date     DateTime?                   @db.DateTime(0)
  payment_status  enrollments_payment_status  @default(Pending)
  payment_method  enrollments_payment_method?
  transaction_id  String?                     @db.VarChar(100)
  price           Decimal                     @db.Decimal(10, 2)
  status          enrollments_status          @default(Pending)
  completion_date DateTime?                   @db.DateTime(0)
  created_at      DateTime?                   @db.Timestamp(0)
  updated_at      DateTime?                   @db.Timestamp(0)
  courses         courses                     @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "enrollments_course_id_foreign")
  users           users                       @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "enrollments_user_id_foreign")
  payments        payments[]
  progress        progress[]
  reviews         reviews?

  @@unique([user_id, course_id], map: "enrollments_user_id_course_id_unique")
  @@index([course_id], map: "enrollments_course_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model lessons {
  id           String         @id @db.Char(36)
  course_id    String         @db.Char(36)
  title        String         @db.VarChar(255)
  description  String?        @db.Text
  content      String?        @db.LongText
  video_url    String?        @db.VarChar(255)
  duration     Int?
  order_number Int
  status       lessons_status @default(Published)
  created_at   DateTime?      @db.Timestamp(0)
  updated_at   DateTime?      @db.Timestamp(0)
  courses      courses        @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "lessons_course_id_foreign")
  materials    materials[]
  progress     progress[]

  @@index([course_id], map: "lessons_course_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model materials {
  id          String    @id @db.Char(36)
  lesson_id   String    @db.Char(36)
  title       String    @db.VarChar(255)
  file_url    String    @db.VarChar(255)
  file_type   String?   @db.VarChar(255)
  file_size   Int?
  description String?   @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  lessons     lessons   @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "materials_lesson_id_foreign")

  @@index([lesson_id], map: "materials_lesson_id_foreign")
}

model messages {
  id              String          @id @db.Char(36)
  conversation_id String          @db.Char(36)
  user_id         String          @db.Char(36)
  content         String?         @db.Text
  attachment_url  String?         @db.VarChar(255)
  attachment_type String?         @db.VarChar(50)
  is_read         Boolean         @default(false)
  status          messages_status @default(Sent)
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  conversations   conversations   @relation(fields: [conversation_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_conversation_id_foreign")
  users           users           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "messages_user_id_foreign")

  @@index([conversation_id], map: "messages_conversation_id_foreign")
  @@index([user_id], map: "messages_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id             String               @id @db.Char(36)
  user_id        String               @db.Char(36)
  title          String               @db.VarChar(255)
  content        String?              @db.Text
  type           notifications_type
  reference_id   Int?
  reference_type String?              @db.VarChar(50)
  is_read        Boolean              @default(false)
  status         notifications_status @default(Active)
  created_at     DateTime?            @db.Timestamp(0)
  updated_at     DateTime?            @db.Timestamp(0)
  users          users                @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "notifications_user_id_foreign")

  @@index([user_id], map: "notifications_user_id_foreign")
}

model password_reset_codes {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  email      String    @db.VarChar(255)
  code       String    @db.VarChar(255)
  expires_at DateTime  @default(now()) @db.Timestamp(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model payments {
  id             String                  @id @db.Char(36)
  invoice_code   String?                 @unique(map: "payments_invoice_code_unique") @db.VarChar(50)
  enrollment_id  String?                 @db.Char(36)
  user_id        String                  @db.Char(36)
  amount         Decimal                 @db.Decimal(10, 2)
  payment_method payments_payment_method
  transaction_id String?                 @db.VarChar(100)
  status         payments_status         @default(Pending)
  billing_info   String?                 @db.LongText
  created_at     DateTime?               @db.Timestamp(0)
  updated_at     DateTime?               @db.Timestamp(0)
  enrollments    enrollments?            @relation(fields: [enrollment_id], references: [id], onUpdate: Restrict, map: "payments_enrollment_id_foreign")
  users          users                   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "payments_user_id_foreign")

  @@index([enrollment_id], map: "payments_enrollment_id_foreign")
  @@index([user_id], map: "payments_user_id_foreign")
}

model permissions {
  id          String             @id @db.Char(36)
  name        String             @unique(map: "permissions_name_unique") @db.VarChar(100)
  description String?            @db.VarChar(255)
  category    String?            @db.VarChar(50)
  status      permissions_status @default(Active)
  created_at  DateTime?          @db.Timestamp(0)
  updated_at  DateTime?          @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_id   String    @db.Char(36)
  tokenable_type String    @db.VarChar(255)
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_id], map: "personal_access_tokens_tokenable_id_index")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model progress {
  id               String          @id @db.Char(36)
  enrollment_id    String          @db.Char(36)
  lesson_id        String          @db.Char(36)
  status           progress_status @default(Not_Started)
  start_date       DateTime?       @db.DateTime(0)
  completion_date  DateTime?       @db.DateTime(0)
  last_access_date DateTime?       @db.DateTime(0)
  time_spent       Int?
  created_at       DateTime?       @db.Timestamp(0)
  updated_at       DateTime?       @db.Timestamp(0)
  enrollments      enrollments     @relation(fields: [enrollment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "progress_enrollment_id_foreign")
  lessons          lessons         @relation(fields: [lesson_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "progress_lesson_id_foreign")

  @@unique([enrollment_id, lesson_id], map: "progress_enrollment_id_lesson_id_unique")
  @@index([lesson_id], map: "progress_lesson_id_foreign")
}

model reviews {
  id            String         @id @db.Char(36)
  enrollment_id String         @unique(map: "reviews_enrollment_id_unique") @db.Char(36)
  rating        Decimal        @db.Decimal(2, 1)
  comment       String?        @db.Text
  status        reviews_status @default(Pending)
  created_at    DateTime?      @db.Timestamp(0)
  updated_at    DateTime?      @db.Timestamp(0)
  enrollments   enrollments    @relation(fields: [enrollment_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "reviews_enrollment_id_foreign")
}

model role_user {
  user_id    String    @db.Char(36)
  role_id    String    @db.Char(36)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_user_role_id_foreign")
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "role_user_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "role_user_role_id_foreign")
}

model roles {
  id         String      @id @db.Char(36)
  name       String      @unique(map: "roles_name_unique") @db.VarChar(255)
  created_at DateTime?   @db.Timestamp(0)
  updated_at DateTime?   @db.Timestamp(0)
  role_user  role_user[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       String? @db.Char(36)
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model social_accounts {
  id            String    @id @db.Char(36)
  user_id       String    @db.Char(36)
  provider_name String    @db.VarChar(255)
  provider_id   String    @db.VarChar(255)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "social_accounts_user_id_foreign")

  @@index([user_id], map: "social_accounts_user_id_foreign")
}

model users {
  id                   String                 @id @db.Char(36)
  name                 String                 @db.VarChar(255)
  email                String?                @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at    DateTime?              @db.Timestamp(0)
  avatar               String?                @db.VarChar(255)
  password             String?                @db.VarChar(255)
  remember_token       String?                @db.VarChar(100)
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  categories           categories[]
  conversation_members conversation_members[]
  courses              courses[]
  enrollments          enrollments[]
  messages             messages[]
  notifications        notifications[]
  payments             payments[]
  role_user            role_user[]
  social_accounts      social_accounts[]
}

enum conversation_members_member_role {
  Admin
  Member
}

enum conversations_type {
  Course
  Private
  Group
}

enum progress_status {
  Not_Started @map("Not Started")
  In_Progress @map("In Progress")
  Completed
}

enum conversation_members_status {
  Active
  Muted
  Left
}

enum conversations_status {
  Active
  Archived
}

enum enrollments_payment_status {
  Pending
  Completed
  Failed
  Refunded
}

enum notifications_type {
  System
  Course
  Payment
  Message
}

enum permissions_status {
  Active
  Inactive
}

enum reviews_status {
  Pending
  Approved
  Rejected
}

enum categories_status {
  Active
  Inactive
}

enum enrollments_payment_method {
  Momo
  Bank
  Paypal
  Cash
}

enum payments_payment_method {
  Momo
  Bank
  Paypal
  Cash
}

enum messages_status {
  Sent
  Delivered
  Read
  Deleted
}

enum payments_status {
  Pending
  Completed
  Failed
  Refunded
}

enum enrollments_status {
  Pending
  Active
  Completed
  Cancelled
}

enum lessons_status {
  Draft
  Published
  Archived
}

enum notifications_status {
  Active
  Archived
  Deleted
}

enum courses_level {
  Beginner
  Intermediate
  Advanced
  All_Levels   @map("All Levels")
}

enum courses_status {
  Draft
  Published
  Archived
}
